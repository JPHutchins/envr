name: Test envr.ps1

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ develop ]

env:
  COLOR_SUCCESS: 1e6e18
  COLOR_FAIL: c31f1d

jobs:
  test_bash_on_ubuntu:
    runs-on: ubuntu-latest
    env:
      color: c31f1d
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        run: echo "version=${BASH_VERSION}" >> $GITHUB_ENV

      - name: Test bash on Ubuntu
        run: tests/sh/bash.sh

      - name: Set success color
        if: success()
        run: echo "color=${{ env.COLOR_SUCCESS }}" >> $GITHUB_ENV
      
      - name: Make badge
        if: success() || failure()
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: ubuntu_bash
          LABEL: bash
          STATUS: ${{ env.version }}
          COLOR: ${{ env.color }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  test_zsh_on_ubuntu:
    runs-on: ubuntu-latest
    env:
      color: c31f1d
    steps:
      - uses: actions/checkout@v3

      - name: Install zsh
        run: sudo apt update && sudo apt install zsh -y
      
      - name: Get version
        run: echo "version=$(zsh --version)" >> $GITHUB_ENV
      
      - name: Test zsh on Ubuntu
        run: tests/sh/zsh.sh
      
      - name: Set success color
        if: success()
        run: echo "color=${{ env.COLOR_SUCCESS }}" >> $GITHUB_ENV
      
      - name: Make badge
        if: success() || failure()
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: ubuntu_zsh
          LABEL: zsh
          STATUS: ${{ env.version }}
          COLOR: ${{ env.color }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
  test_ps_on_windows:
    runs-on: windows-latest
    env:
      color: c31f1d
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version
        run: echo "version=$PSVersionTable.PSVersion" >> $GITHUB_ENV
      
      - name: Test ps on Windows
        run: ./tests/windows/ps.ps1
      
      - name: Set success color
        if: success()
        run: echo "color=${{ env.COLOR_SUCCESS }}" >> $GITHUB_ENV
      
      - name: Make badge
        if: success() || failure()
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: windows_ps
          LABEL: PowerShell
          STATUS: ${{ env.version }}
          COLOR: ${{ env.color }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  test_bash_on_mac:
    runs-on: macos-latest
    env:
      color: c31f1d
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version
        run: echo "version=${BASH_VERSION}" >> $GITHUB_ENV
      
      - name: Test bash on MacOS
        run: tests/sh/bash.sh
      
      - name: Set success color
        if: success()
        run: echo "color=${{ env.COLOR_SUCCESS }}" >> $GITHUB_ENV
      
      - name: Make badge
        if: success() || failure()
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: mac_bash
          LABEL: bash
          STATUS: ${{ env.version }}
          COLOR: ${{ env.color }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  test_zsh_on_mac:
    runs-on: macos-latest
    env:
      color: c31f1d
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version
        run: echo "version=$(zsh --version)" >> $GITHUB_ENV
      
      - name: Test bash on MacOS
        run: tests/sh/zsh.sh
      
      - name: Set success color
        if: success()
        run: echo "color=${{ env.COLOR_SUCCESS }}" >> $GITHUB_ENV
      
      - name: Make badge
        if: success() || failure()
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: mac_zsh
          LABEL: zsh
          STATUS: ${{ env.version }}
          COLOR: ${{ env.color }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # test:
  #   strategy:
  #     matrix:
  #       os: [windows-latest, windows-2019, ubuntu-latest, ubuntu-20.04, macos-latest, macos-11]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Test PowerShell on ${{ matrix.os }}
  #       if: ${{ contains(matrix.os, 'windows') }}
  #       run: .\tests\windows\ps.ps1

  #     - name: Test bash on ${{ matrix.os }}
  #       if: ${{ !contains(matrix.os, 'windows') }}
  #       run: tests/sh/bash.sh

  #     - name: Install zsh on ${{ matrix.os }}
  #       if: ${{ contains(matrix.os, 'ubuntu') }}
  #       run: sudo apt update && sudo apt install zsh -y

  #     - name: Test zsh on ${{ matrix.os }}
  #       if: ${{ !contains(matrix.os, 'windows') }}
  #       run: tests/sh/zsh.sh
